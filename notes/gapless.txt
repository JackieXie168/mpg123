Gapless MP3 playback
--------------------

MP3 was not designed for gapless playback. It was designed for shrinking the data size of audio streams.
For technical reasons, encoders and decoders have a delay of some (normally) fixed amount and also silence is padded to get frames filled.
The latter is wuite well known while the former is not too well known (many ppl think that for gapless decoding you only need to eliminate the padding).

Lame has (nowadays) an encoder delay of 576 samples. That gets added to the front.
Lame also pads with zeros at the back. I don't know why it pads with >1152 (frame size in case of MPEG-1) samples - thus creating even new frames? - but it writes these correct values in the Lame tag.
Lame ppl are very aware of the mpglib engine (and mpg123) having a decoder delay of 529 samples, Lame skips the first encoder_delay + 529 samples (1105, normally) for mp3 input files.

Mpg123 can do that, too. But for the removal of the trailing padding, you have to consider the decoder delay again.
I can just make it ignore output samples in audio_flush without touching the decoder... that works but has to take care of any resampling going on and I'm yet very unsure about layer 1 and 2 files (but since those files won't have the Lame tag, the procedure wouldn't be _that_ useful).
One example:

A raw stereo 16bit LE source file with 40803 samples...

	$ ./lame -r -x source.raw
	Assuming raw pcm input file : Forcing byte-swapping
	LAME version 3.96.1 (http://lame.sourceforge.net/)
	Using polyphase lowpass filter, transition band: 17249 Hz - 17782 Hz
	Encoding source.raw to source.raw.mp3
	Encoding as 44.1 kHz 128 kbps j-stereo MPEG-1 Layer III (11x) qval=3
    	Frame          |  CPU time/estim | REAL time/estim | play/CPU |    ETA 
    	35/37     (95%)|    0:00/    0:00|    0:00/    0:00|   1.7582x|    0:00 
	average: 128.0 kbps                    MS: 37 (100.0%)

	Writing LAME Tag...done
	ReplayGain: -2.5dB
	revmethod = 1
	encoder padding: 1245

Lame made 37 frames = 42624 samples out of this. Decoding with normal mpg123: I get 42624 samples.
Looking at the waveform, I see a pause at the beginning of length 1105 samples: The 529 sampels decoder delay before anything and then the decoded 576 samples of the silence from LAME (not perfectly silent, though).
Now look at the end... instead of Lame's 1245 perfect zeros, I see some low-level dirt that relaxes from the cut of the ending source signal (not smooth). I see 716 samples of that. That is the decoder delay again - this time it doesn't add silence, it _kills_ the last 529 samples of input!
For that reason some sufficient padding seems to be desirable in all mp3s - together with the bits if info, that doesn't prevent gapless playback!
Hm, but still... It could just be that mpg123 already takes care of its decoder delay only for output, not input... ah, I'm too tired now. Have to think about that with a waking mind.

Ok, it seems to work now with taking he decoder delay into account (as additional delay at begin and to supstract from padding at end)... I still need to hook in the logic correctly so that it actually works with multiple tracks.

It seems to work with the same delays for different sampling rates (tested 22.05kHz), while there also seems to be a problem with lame when one uses resampling to reach that (missing sound at end).

Gapless MP2?
------------

Hm, I looked at the output of mp2 files encoded with mjpegtools' mp2enc and then decoded with... whatever. I have a delay at the beginning (less that 529 samples, as it seems), and missing sound at the end! Even with the junk at begining, the result was 483 samples short.
What does toolame?

Ok, with toolame, it looks better. The full sound is preserved, with some low-noise ramblings at beginning and end. I don't have details about endocer delay/padding from toolame, while it _could_ be modified to write a lame tag, too, I think.

Should mp2 encoders at some time adopt the practice on lame to write the necessary info in the header, I will use it. For now, I'll restrict the gapless mode only to mp3, where it is doable and wanted.

Sound from the grave
--------------------

Play, pause, seek, un-pause. That sounds bad! Old data is heard.
I make a strong guess that this is because of overlapping frame data from old position being used.
It is not totally clear how much data is "wrong".
A test waveform from pause-jump_to_2-unpause shows old sound (1 frame) then silence and soft beginning of new sound.
For the jump to the beginning, the gapless code seems to catch the situation pretty well.
But for a jump to somehere, the encoder padding does not apply.

So, what is the real solution to that? For a quick hack, I can try seeking to one frame _before_ the wanted one and skip it's output.
I'm wondering if I should care for the re-entry not being too aprupt (click).

And what keeps this nasty effect from happening on changing tracks? I guess the padding.

The relation between current decoded frame together with previous frames to the current output has to be cleared up.
There are long range effects.

Hm, best would be to reinit the decoder like on start of first track and just ignore decoder delay.
But it seems like such a reinit is not in the code at all currently.

So, the first dirty solution (in control_generic / layer3.c):

	- Every jump while paused is made to two frames _before_ the wanted one.
	- On restart of playback, two frames worth of samples are ignored.
	- Jumping to 0 works already nicely in practice through normal gapless code.
	- Jumping to 1, well, can only skip one frame...

That is not clean, but it is for sure better than what happened before in the concerned situation. I am still unsure about the role of the decoder delay in this case...
But for now, I'll have this code in control_generic and will add it to terminal mode. Note that for realtime user experience a softer fade-in of seeked-to sound may be desired as well as there is a dependency on the audio output to have its buffer cleared on pause/seek.
I'll make this depend on the --gapless parameter since it shares ideas and code. Without --gapless, it should behave as it did all the time...

A sidenote on what others seem to do: xmms does not have sound from the grave, but it swallos quite a lot of sound even when just doing pause/unpause.

Hm, the terminal mode has to wait a bit. It's more complicated there because state handling and playback is separated between term.c and mpg123.c .
